# PREPARE FOR WORK

Artifacts you'll need (from previous packaging):

	0: .orig.tar.gz .dsc .debian.tar.xz files from previous packaging

		// debian metadata and build rules
		armorydb_<deb_version>-<deb_release>.debian.tar.xz

		// debian manifest
		armorydb_<deb_version>-<deb_release>.dsc

		// just a git archive
		armorydb_<deb_version>.orig.tar.gz

		// symlink to current manifest
		armorydb.dsc

	1:
		// automation script
		makefile

# REBUILD ARTIFACTS

In case you need to make changes to debian metadata and/or build rules:

	2. Unpack artifacts:

		$ make deb-prepare

	3. Make changes as needed, i.e.:

		$ vim armorydb/debian/control
		$ vim armorydb/debian/rules

	4. Repack artifacts:

		$ make deb-rebuild

# UPDATE GIT SNAPSHOT

	5. Clone git sources of armorydb (reusable):

		$ git clone https://github.com/BlockSettle/ArmoryDB.git

	6. Rebuild packaging artifacts with latest git snapshot:

		$ make deb-uupdate

	It should create new .orig.tar.gz .dsc .debian.tar.xz files with date and commit hash updated.

	7. Repack artifacts:

		$ make deb-rebuild

	Symlink ./armorydb.dsc will be updated automatically.

# REBUILD BACKPORTS

Previous scenarios manage universal packaging artifacts. They're suitable for local builds.
But for launchpad per-release artifacts should be built.


	7. Rebuild backports artifacts for different releases:

		$ make deb-backports

	By default it will create backports for: bionic cosmic and xenial releases.
	It should create bunch of .dsc .debian.tar.xz for different releases. .orig.tar.gz reused with same name.

# TEST LOCAL BUILDS

Should be done independently for each backport:

	8. Create chroot environments for clean rebuld (requires root privileges, reusable):

		# distrib='bionic'
		# pbuilder create --distribution ${distrib} --basetgz /var/cache/pbuilder/${distrib}.tgz --debootstrapopts --variant=buildd

	9. Run build:

		# pbuilder build --basetgz /var/cache/pbuilder/${distrib}.tgz ./armorydb~${distrib}.dsc

	10. Once build completed packages check them:

		$ cd /var/cache/pbuilder/result

	11. In order to speed-up builds follow instructions in article about `tmpfs` and `ccache` usage:

		https://wiki.ubuntu.com/PbuilderHowto

# DEB-SIGN PACKAGES

Should be done independently for each backport:

	12. Unpack sources:

		$ dpkg-source -x ./armorydb_<version>-<release>~<distrib>1.dsc

	13. Repack sources with signing:

		$ cd ./armorydb_<version>
		$ debuild -S -sa -d

	It should regenerate .dsc file and additionally generate .changes files.

# UPLOAD FOR BUILD

Should be done independently for each backport:

	14. Upload sources:

		$ dput ppa:blocksettle/armorydb ./armorydb_<version>-<release>~${distrib}1_source.changes

	If everything goes fine packages will be scheduled for build and publishing.
	There will be mail message with upload status sent to email address associated with Launchpad-account.
